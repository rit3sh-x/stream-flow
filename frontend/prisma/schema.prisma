generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String            @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime          @default(now())
  clerkid      String            @unique
  studio       Media?
  image        String?
  workspace    WorkSpace[]
  videos       Video[]
  members      Member[]
  notification Notification[]
  sender       Invite[]          @relation("sender")
  reciever     Invite[]          @relation("reciever")
  trial        Boolean           @default(false)
  firstView    Boolean           @default(false)
  plan         SUBSCRIPTION_PLAN @default(FREE)
  comment      Comment[]
}

model Comment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment   String
  reply     Comment[] @relation("reply")
  Comment   Comment?  @relation("reply", fields: [commentId], references: [id])
  commentId String?   @db.Uuid
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  Video     Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String?   @db.Uuid
  createdAt DateTime  @default(now())
}

model Media {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.Uuid
}

model WorkSpace {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      WORKSPACE
  name      String
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.Uuid
  createdAt DateTime  @default(now())
  folders   Folder[]
  videos    Video[]
  members   Member[]
  invite    Invite[]
}

model Folder {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
  videos      Video[]
}

model Video {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String?    @default("Untilted Video")
  description     String?    @default("No Description")
  source          String     @unique
  createdAt       DateTime   @default(now())
  Folder          Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId        String?    @db.Uuid
  User            User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?    @db.Uuid
  processing      Boolean    @default(true)
  WorkSpace       WorkSpace? @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId     String?    @db.Uuid
  views           Int        @default(0)
  summary         String?
  transcriptionId String?
  Comment         Comment[]
}

model Member {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.Uuid
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
}

model Notification {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.Uuid
  content String
}

model Invite {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  senderId    String?    @db.Uuid
  reciever    User?      @relation("reciever", fields: [recieverId], references: [id])
  recieverId  String?    @db.Uuid
  content     String
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
  accepted    Boolean    @default(false)
}

enum WORKSPACE {
  PERSONAL
  PUBLIC
}

enum PRESET {
  HD
  SD
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}
